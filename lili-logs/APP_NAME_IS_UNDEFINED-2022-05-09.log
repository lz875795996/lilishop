2022-05-09 09:29:35.816  INFO 23788 --- [main] cn.lili.ShopApiApplication               : Starting ShopApiApplication using Java 1.8.0_31 on DESKTOP-MTHKMGC with PID 23788 (D:\SVN\我的项目\lilishop-simplify-master\lilishop-simplify-master\shop-api\target\classes started by liuk in D:\SVN\我的项目\lilishop-simplify-master)
2022-05-09 09:29:35.833  INFO 23788 --- [main] cn.lili.ShopApiApplication               : No active profile set, falling back to default profiles: default
2022-05-09 09:29:53.369  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2022-05-09 09:29:53.410  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2022-05-09 09:29:57.161  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 3716 ms. Found 2 Elasticsearch repository interfaces.
2022-05-09 09:29:57.176  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2022-05-09 09:29:57.178  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2022-05-09 09:29:57.552  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 373 ms. Found 0 Reactive Elasticsearch repository interfaces.
2022-05-09 09:29:57.605  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2022-05-09 09:29:57.616  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2022-05-09 09:29:57.998  INFO 23788 --- [main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface cn.lili.modules.permission.repository.SystemLogRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2022-05-09 09:29:58.000  INFO 23788 --- [main] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface cn.lili.modules.search.repository.EsGoodsIndexRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2022-05-09 09:29:58.000  INFO 23788 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 337 ms. Found 0 Redis repository interfaces.
2022-05-09 09:29:59.684  INFO 23788 --- [main] ptablePropertiesBeanFactoryPostProcessor : Post-processing PropertySource instances
2022-05-09 09:29:59.688  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Skipping PropertySource configurationProperties [class org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource
2022-05-09 09:29:59.693  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Skipping PropertySource servletConfigInitParams [class org.springframework.core.env.PropertySource$StubPropertySource
2022-05-09 09:29:59.693  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Skipping PropertySource servletContextInitParams [class org.springframework.core.env.PropertySource$StubPropertySource
2022-05-09 09:29:59.695  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Converting PropertySource systemProperties [org.springframework.core.env.PropertiesPropertySource] to EncryptableMapPropertySourceWrapper
2022-05-09 09:29:59.696  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Converting PropertySource systemEnvironment [org.springframework.boot.env.SystemEnvironmentPropertySourceEnvironmentPostProcessor$OriginAwareSystemEnvironmentPropertySource] to EncryptableSystemEnvironmentPropertySourceWrapper
2022-05-09 09:29:59.700  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Converting PropertySource random [org.springframework.boot.env.RandomValuePropertySource] to EncryptablePropertySourceWrapper
2022-05-09 09:29:59.701  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Converting PropertySource Config resource 'class path resource [application.yml]' via location 'optional:classpath:/' [org.springframework.boot.env.OriginTrackedMapPropertySource] to EncryptableMapPropertySourceWrapper
2022-05-09 09:29:59.732  INFO 23788 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'errorChannel' has been explicitly defined. Therefore, a default PublishSubscribeChannel will be created.
2022-05-09 09:29:59.754  INFO 23788 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'taskScheduler' has been explicitly defined. Therefore, a default ThreadPoolTaskScheduler will be created.
2022-05-09 09:29:59.775  INFO 23788 --- [main] faultConfiguringBeanFactoryPostProcessor : No bean named 'integrationHeaderChannelRegistry' has been explicitly defined. Therefore, a default DefaultHeaderChannelRegistry will be created.
2022-05-09 09:30:00.250  INFO 23788 --- [main] c.u.j.filter.DefaultLazyPropertyFilter   : Property Filter custom Bean not found with name 'encryptablePropertyFilter'. Initializing Default Property Filter
2022-05-09 09:30:00.297  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'threadProperties' of type [cn.lili.common.properties.ThreadProperties$$EnhancerBySpringCGLIB$$4308cf83] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:00.300  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'threadConfig' of type [cn.lili.common.thread.ThreadConfig$$EnhancerBySpringCGLIB$$b5412d9b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:01.142  INFO 23788 --- [main] c.u.j.r.DefaultLazyPropertyResolver      : Property Resolver custom Bean not found with name 'encryptablePropertyResolver'. Initializing Default Property Resolver
2022-05-09 09:30:01.149  INFO 23788 --- [main] c.u.j.d.DefaultLazyPropertyDetector      : Property Detector custom Bean not found with name 'encryptablePropertyDetector'. Initializing Default Property Detector
2022-05-09 09:30:01.179  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'spring.redis-org.springframework.boot.autoconfigure.data.redis.RedisProperties' of type [org.springframework.boot.autoconfigure.data.redis.RedisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:01.196  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'redisConfig' of type [cn.lili.cache.config.redis.RedisConfig$$EnhancerBySpringCGLIB$$c0d8a98] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:01.330  INFO 23788 --- [main] cn.lili.cache.config.redis.RedisConfig   : 初始化 -> [Redis CacheErrorHandler]
2022-05-09 09:30:01.333  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'errorHandler' of type [cn.lili.cache.config.redis.RedisConfig$1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:01.470  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler@669daa93' of type [org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:01.493  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'methodSecurityMetadataSource' of type [org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:01.571  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.integration.config.IntegrationManagementConfiguration' of type [org.springframework.integration.config.IntegrationManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:01.635  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'integrationChannelResolver' of type [org.springframework.integration.support.channel.BeanFactoryChannelResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:01.642  INFO 23788 --- [main] trationDelegate$BeanPostProcessorChecker : Bean 'integrationDisposableAutoCreatedBeans' of type [org.springframework.integration.config.annotation.Disposables] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-05-09 09:30:03.287  INFO 23788 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8888 (http)
2022-05-09 09:30:03.310  INFO 23788 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2022-05-09 09:30:03.310  INFO 23788 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.52]
2022-05-09 09:30:03.788  INFO 23788 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2022-05-09 09:30:03.788  INFO 23788 --- [main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 26754 ms
2022-05-09 09:31:04.605  INFO 23788 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2022-05-09 09:31:04.674  INFO 23788 --- [main] o.a.s.c.config.log.ConfigurationLogger   : ShardingRuleConfiguration
{}

2022-05-09 09:31:04.678  INFO 23788 --- [main] o.a.s.c.config.log.ConfigurationLogger   : Properties
sql.show: 'true'

2022-05-09 09:31:32.038  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@83b39c3
2022-05-09 09:31:32.042  INFO 23788 --- [main] RocketmqRemoting                         : name server address updated. NEW : [192.168.120.181:9876] , OLD: null
2022-05-09 09:31:32.443  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:PullMessageService started:false lastThread:null
2022-05-09 09:31:32.444  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:RebalanceService started:false lastThread:null
2022-05-09 09:31:32.454  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : new name server is chosen. OLD: null , NEW: 192.168.120.181:9876. namesrvIndex = 44
2022-05-09 09:31:35.745  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:31:35.831  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:31:35.840  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@58ea78c(success)
2022-05-09 09:31:35.841  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : closeChannel: begin close the channel[192.168.120.181:9876] Found: true
2022-05-09 09:31:35.846  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : closeChannel: the channel[192.168.120.181:9876] was removed from channel table
2022-05-09 09:31:35.853  WARN 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : invokeSync: close socket because of timeout, 3000ms, null
2022-05-09 09:31:35.853  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CLOSE 192.168.120.181:9876
2022-05-09 09:31:35.854  WARN 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : invokeSync: wait response timeout exception, the channel[null]
2022-05-09 09:31:35.854  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : eventCloseChannel: the channel[null] has been removed from the channel table before
2022-05-09 09:31:35.860  INFO 23788 --- [NettyClientSelector_1] RocketmqRemoting                         : closeChannel: close the connection to remote address[192.168.120.181:9876] result: true
2022-05-09 09:31:45.927  INFO 23788 --- [main] o.s.aop.framework.CglibAopProxy          : Unable to proxy interface-implementing method [public final long cn.lili.modules.goods.serviceimpl.GoodsServiceImpl.getGoodsCountByCategory(java.lang.String)] because it is marked as final: Consider using interface-based JDK proxies instead!
2022-05-09 09:31:48.737  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.737  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.737  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.737  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.738  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface org.springframework.data.elasticsearch.core.geo.GeoJson to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.738  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to interface org.springframework.data.elasticsearch.core.geo.GeoJson as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.738  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.738  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.738  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.739  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.739  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonLineString to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.743  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonLineString as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.744  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiLineString to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.744  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiLineString as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.744  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonPolygon to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.745  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonPolygon as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.745  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiPolygon to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.745  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiPolygon as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.745  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonGeometryCollection to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:48.745  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonGeometryCollection as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.107  INFO 23788 --- [main] o.s.d.elasticsearch.support.VersionInfo  : Version Spring Data Elasticsearch: 4.1.12
2022-05-09 09:31:49.107  INFO 23788 --- [main] o.s.d.elasticsearch.support.VersionInfo  : Version Elasticsearch Client in build: 7.9.3
2022-05-09 09:31:49.108  INFO 23788 --- [main] o.s.d.elasticsearch.support.VersionInfo  : Version Elasticsearch Client used: 7.9.3
2022-05-09 09:31:49.108  INFO 23788 --- [main] o.s.d.elasticsearch.support.VersionInfo  : Version Elasticsearch cluster: 7.3.0
2022-05-09 09:31:49.108  WARN 23788 --- [main] o.s.d.elasticsearch.support.VersionInfo  : Version mismatch in between Elasticsearch Client and Cluster: 7.9.3 - 7.3.0
2022-05-09 09:31:49.592  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.geo.Point to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.592  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.geo.Point as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface org.springframework.data.elasticsearch.core.geo.GeoJson to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to interface org.springframework.data.elasticsearch.core.geo.GeoJson as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiPoint to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiPoint as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.593  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonLineString to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.596  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonLineString as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.597  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiLineString to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.597  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiLineString as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.598  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonPolygon to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.598  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonPolygon as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.599  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiPolygon to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.599  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonMultiPolygon as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.599  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from class org.springframework.data.elasticsearch.core.geo.GeoJsonGeometryCollection to interface java.util.Map as writing converter although it doesn't convert to a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:31:49.599  WARN 23788 --- [main] o.s.data.convert.CustomConversions       : Registering converter from interface java.util.Map to class org.springframework.data.elasticsearch.core.geo.GeoJsonGeometryCollection as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2022-05-09 09:32:02.306  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@64e06cf0
2022-05-09 09:32:02.308  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@6e9d60e1
2022-05-09 09:32:02.309  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@207283b4
2022-05-09 09:32:02.310  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@6b6d68d2
2022-05-09 09:32:02.311  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@c8d0ea3
2022-05-09 09:32:02.312  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@912fdbb
2022-05-09 09:32:02.314  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@3d49b00e
2022-05-09 09:32:02.316  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@3d62648d
2022-05-09 09:32:02.452  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : new name server is chosen. OLD: 192.168.120.181:9876 , NEW: 192.168.120.181:9876. namesrvIndex = 45
2022-05-09 09:32:02.453  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:32:02.454  INFO 23788 --- [NettyClientWorkerThread_2] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:32:02.458  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@68052d86(success)
2022-05-09 09:32:02.825  INFO 23788 --- [main] org.redisson.Version                     : Redisson 3.15.6
2022-05-09 09:32:02.827  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@7f64f070
2022-05-09 09:32:02.828  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@78d0baeb
2022-05-09 09:32:02.830  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@5a79e98e
2022-05-09 09:32:02.831  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@5944fbf0
2022-05-09 09:32:02.833  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@1fb77d8
2022-05-09 09:32:02.834  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@7c0182ee
2022-05-09 09:32:02.836  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@69a12179
2022-05-09 09:32:02.837  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@17c4dcc6
2022-05-09 09:32:02.839  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@4ddb2c51
2022-05-09 09:32:02.841  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@3dbdc1f6
2022-05-09 09:32:02.842  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@5df785d1
2022-05-09 09:32:02.844  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@6ce45045
2022-05-09 09:32:02.846  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@78c9502c
2022-05-09 09:32:02.847  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@2ba89cb2
2022-05-09 09:32:02.849  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@4a105d1b
2022-05-09 09:32:02.851  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@4b85a64
2022-05-09 09:32:02.853  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@36c222ef
2022-05-09 09:32:02.854  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@59606589
2022-05-09 09:32:02.856  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@11d0033b
2022-05-09 09:32:02.858  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@577d001f
2022-05-09 09:32:02.860  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@708f8545
2022-05-09 09:32:02.861  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@2a19eaf0
2022-05-09 09:32:02.863  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@3bc1ed53
2022-05-09 09:32:02.864  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@4037fcc
2022-05-09 09:32:02.865  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@8aa77a4
2022-05-09 09:32:02.866  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@6d81522b
2022-05-09 09:32:02.867  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@599e81bd
2022-05-09 09:32:02.868  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@467c785d
2022-05-09 09:32:02.869  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@1d302061
2022-05-09 09:32:02.870  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@7a4729e6
2022-05-09 09:32:02.871  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@57f9cc7a
2022-05-09 09:32:02.873  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@7262f848
2022-05-09 09:32:03.489  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:10911] asynchronously
2022-05-09 09:32:03.491  INFO 23788 --- [NettyClientWorkerThread_3] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:10911
2022-05-09 09:32:03.492  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:10911] success, AbstractBootstrap$PendingRegistrationPromise@6f5b83e6(success)
2022-05-09 09:32:03.648  INFO 23788 --- [redisson-netty-5-20] o.r.c.pool.MasterPubSubConnectionPool    : 1 connections initialized for 192.168.120.181/192.168.120.181:6379
2022-05-09 09:32:03.703  INFO 23788 --- [redisson-netty-5-20] o.r.c.pool.MasterConnectionPool          : 24 connections initialized for 192.168.120.181/192.168.120.181:6379
2022-05-09 09:32:04.861  INFO 23788 --- [main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 15 endpoint(s) beneath base path '/actuator'
2022-05-09 09:32:05.058  INFO 23788 --- [main] c.l.c.timetask.config.XxlJobConfig       : >>>>>>>>>>> xxl-job config init.
2022-05-09 09:32:05.224  INFO 23788 --- [main] pertySourcedRequestMappingHandlerMapping : Mapped URL path [/v2/api-docs] onto method [springfox.documentation.swagger2.web.Swagger2ControllerWebMvc#getDocumentation(String, HttpServletRequest)]
2022-05-09 09:32:06.850  INFO 23788 --- [main] org.quartz.impl.StdSchedulerFactory      : Using default implementation for ThreadExecutor
2022-05-09 09:32:06.874  INFO 23788 --- [main] org.quartz.core.SchedulerSignalerImpl    : Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2022-05-09 09:32:06.875  INFO 23788 --- [main] org.quartz.core.QuartzScheduler          : Quartz Scheduler v.2.3.2 created.
2022-05-09 09:32:06.876  INFO 23788 --- [main] org.quartz.simpl.RAMJobStore             : RAMJobStore initialized.
2022-05-09 09:32:06.878  INFO 23788 --- [main] org.quartz.core.QuartzScheduler          : Scheduler meta-data: Quartz Scheduler (v2.3.2) 'quartzScheduler' with instanceId 'NON_CLUSTERED'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 10 threads.
  Using job-store 'org.quartz.simpl.RAMJobStore' - which does not support persistence. and is not clustered.

2022-05-09 09:32:06.878  INFO 23788 --- [main] org.quartz.impl.StdSchedulerFactory      : Quartz scheduler 'quartzScheduler' initialized from an externally provided properties instance.
2022-05-09 09:32:06.880  INFO 23788 --- [main] org.quartz.impl.StdSchedulerFactory      : Quartz scheduler version: 2.3.2
2022-05-09 09:32:06.880  INFO 23788 --- [main] org.quartz.core.QuartzScheduler          : JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@2f11f73e
2022-05-09 09:32:06.940  INFO 23788 --- [main] .s.s.UserDetailsServiceAutoConfiguration : 

Using generated security password: 5740848e-1caf-4633-aca9-820cd6a46e11

2022-05-09 09:32:07.161  INFO 23788 --- [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@70143ee4, org.springframework.security.web.context.SecurityContextPersistenceFilter@2d579733, org.springframework.security.web.header.HeaderWriterFilter@43c28101, org.springframework.web.filter.CorsFilter@74f1c9b9, org.springframework.security.web.authentication.logout.LogoutFilter@4fd43b14, cn.lili.security.manager.ManagerAuthenticationFilter@5742a4bb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@d388775, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6145be92, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@17b1f9a7, org.springframework.security.web.session.SessionManagementFilter@3833a045, org.springframework.security.web.access.ExceptionTranslationFilter@6b21a869, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@700fec90]
2022-05-09 09:32:07.169  INFO 23788 --- [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@42acca1a, org.springframework.security.web.context.SecurityContextPersistenceFilter@2fe19bda, org.springframework.security.web.header.HeaderWriterFilter@e80fc9d, org.springframework.web.filter.CorsFilter@6ac3ceda, org.springframework.security.web.authentication.logout.LogoutFilter@14443c86, cn.lili.security.buyer.BuyerAuthenticationFilter@4a26a54b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@141fc03a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1df2b230, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3145c33b, org.springframework.security.web.session.SessionManagementFilter@4abc179d, org.springframework.security.web.access.ExceptionTranslationFilter@56ddb317, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@48667fd3]
2022-05-09 09:32:07.187  INFO 23788 --- [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2bd9722, org.springframework.security.web.context.SecurityContextPersistenceFilter@cdf67f1, org.springframework.security.web.header.HeaderWriterFilter@14cd3858, org.springframework.web.filter.CorsFilter@544cd64b, org.springframework.security.web.authentication.logout.LogoutFilter@311d2611, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@29810fa0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@54f3fd30, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@b50cfa7, org.springframework.security.web.session.SessionManagementFilter@3c45c5cd, org.springframework.security.web.access.ExceptionTranslationFilter@4bedd2d8, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@14f7e21a]
2022-05-09 09:32:07.194  INFO 23788 --- [main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5f065ddc, org.springframework.security.web.context.SecurityContextPersistenceFilter@60cc749d, org.springframework.security.web.header.HeaderWriterFilter@3119ce7a, org.springframework.web.filter.CorsFilter@2c94299a, org.springframework.security.web.authentication.logout.LogoutFilter@49ce2726, cn.lili.security.store.StoreAuthenticationFilter@39fc5c09, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@40f2ae53, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3f67d229, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@777b2207, org.springframework.security.web.session.SessionManagementFilter@4b77d80e, org.springframework.security.web.access.ExceptionTranslationFilter@719a208f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@278d2891]
2022-05-09 09:32:07.667  INFO 23788 --- [main] c.xxl.job.core.executor.XxlJobExecutor   : >>>>>>>>>>> xxl-job register jobhandler success, name:everyHourExecuteJobHandler, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@6c73d88c[class cn.lili.consumer.timetask.TimedTaskJobHandler#everyHourExecuteJobHandler]
2022-05-09 09:32:07.667  INFO 23788 --- [main] c.xxl.job.core.executor.XxlJobExecutor   : >>>>>>>>>>> xxl-job register jobhandler success, name:everyMinuteExecute, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@70420c70[class cn.lili.consumer.timetask.TimedTaskJobHandler#everyMinuteExecute]
2022-05-09 09:32:07.667  INFO 23788 --- [main] c.xxl.job.core.executor.XxlJobExecutor   : >>>>>>>>>>> xxl-job register jobhandler success, name:everyDayExecuteJobHandler, jobHandler:com.xxl.job.core.handler.impl.MethodJobHandler@7e36c60b[class cn.lili.consumer.timetask.TimedTaskJobHandler#everyDayExecuteJobHandler]
2022-05-09 09:32:07.888  WARN 23788 --- [main] c.xxl.job.core.executor.XxlJobExecutor   : >>>>>>>>>>> xxl-job accessToken is empty. To ensure system security, please set the accessToken.
2022-05-09 09:32:07.894  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@293726b3
2022-05-09 09:32:07.895  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@27f0dde5
2022-05-09 09:32:07.897  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@23cf4dc3
2022-05-09 09:32:07.898  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@66cdd7de
2022-05-09 09:32:07.900  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@765f770a
2022-05-09 09:32:07.901  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@576193d1
2022-05-09 09:32:07.903  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@e196dab
2022-05-09 09:32:07.904  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@6e22891
2022-05-09 09:32:07.906  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@b88e860
2022-05-09 09:32:07.908  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@502c1ddb
2022-05-09 09:32:07.911  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@151d4640
2022-05-09 09:32:07.913  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@2ac52d2
2022-05-09 09:32:07.915  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@4eab610f
2022-05-09 09:32:07.916  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@7ed96fc4
2022-05-09 09:32:07.918  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@1891919
2022-05-09 09:32:07.919  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@6153f138
2022-05-09 09:32:07.921  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@4270ae4a
2022-05-09 09:32:07.923  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@66b9927f
2022-05-09 09:32:07.925  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@58fa114e
2022-05-09 09:32:07.926  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@2c6979ee
2022-05-09 09:32:07.928  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@6b2c90d7
2022-05-09 09:32:07.930  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@41accda7
2022-05-09 09:32:07.932  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@49d4d4bd
2022-05-09 09:32:07.934  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@2e957260
2022-05-09 09:32:07.935  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@21b0e54d
2022-05-09 09:32:07.937  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@656d529
2022-05-09 09:32:07.939  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@69c89862
2022-05-09 09:32:07.941  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@6ccbf149
2022-05-09 09:32:07.943  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@4af7fb10
2022-05-09 09:32:07.945  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@7ab890fa
2022-05-09 09:32:07.946  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@571e0c47
2022-05-09 09:32:07.947  INFO 23788 --- [Thread-13] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@64ecfe54
2022-05-09 09:32:07.968  INFO 23788 --- [Thread-13] com.xxl.job.core.server.EmbedServer      : >>>>>>>>>>> xxl-job remoting server start success, nettype = class com.xxl.job.core.server.EmbedServer, port = 8891
2022-05-09 09:32:08.910  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@27c243a3
2022-05-09 09:32:08.911  INFO 23788 --- [main] RocketmqRemoting                         : name server address updated. NEW : [192.168.120.181:9876] , OLD: null
2022-05-09 09:32:09.289  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:PullMessageService started:false lastThread:null
2022-05-09 09:32:09.289  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:RebalanceService started:false lastThread:null
2022-05-09 09:32:09.291  INFO 23788 --- [main] RocketmqRemoting                         : new name server is chosen. OLD: null , NEW: 192.168.120.181:9876. namesrvIndex = 748
2022-05-09 09:32:09.293  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:32:09.296  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:32:09.297  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@59d2e20f(success)
2022-05-09 09:32:09.325  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:10911] asynchronously
2022-05-09 09:32:09.326  INFO 23788 --- [NettyClientWorkerThread_2] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:10911
2022-05-09 09:32:09.327  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:10911] success, AbstractBootstrap$PendingRegistrationPromise@347c6044(success)
2022-05-09 09:32:09.344  INFO 23788 --- [main] a.r.s.s.DefaultRocketMQListenerContainer : running container: DefaultRocketMQListenerContainer{consumerGroup='lili_send_notice_group', nameServer='192.168.120.181:9876', topic='lili_send_notice_topic', consumeMode=CONCURRENTLY, selectorType=TAG, selectorExpression='*', messageModel=CLUSTERING}
2022-05-09 09:32:09.344  INFO 23788 --- [main] o.a.r.s.a.ListenerContainerConfiguration : Register the listener to container, listenerBeanName:noticeSendMessageListener, containerBeanName:org.apache.rocketmq.spring.support.DefaultRocketMQListenerContainer_1
2022-05-09 09:32:10.041  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@154bc3cf
2022-05-09 09:32:10.042  INFO 23788 --- [main] RocketmqRemoting                         : name server address updated. NEW : [192.168.120.181:9876] , OLD: null
2022-05-09 09:32:10.340  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:PullMessageService started:false lastThread:null
2022-05-09 09:32:10.341  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:RebalanceService started:false lastThread:null
2022-05-09 09:32:10.341  INFO 23788 --- [main] RocketmqRemoting                         : new name server is chosen. OLD: null , NEW: 192.168.120.181:9876. namesrvIndex = 605
2022-05-09 09:32:10.342  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:32:10.345  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:32:10.346  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@6ed836b3(success)
2022-05-09 09:32:10.354  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:10911] asynchronously
2022-05-09 09:32:10.356  INFO 23788 --- [NettyClientWorkerThread_2] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:10911
2022-05-09 09:32:10.358  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:10911] success, AbstractBootstrap$PendingRegistrationPromise@575dab37(success)
2022-05-09 09:32:10.365  INFO 23788 --- [main] a.r.s.s.DefaultRocketMQListenerContainer : running container: DefaultRocketMQListenerContainer{consumerGroup='lili_notice_group', nameServer='192.168.120.181:9876', topic='lili_notice_topic', consumeMode=CONCURRENTLY, selectorType=TAG, selectorExpression='*', messageModel=CLUSTERING}
2022-05-09 09:32:10.365  INFO 23788 --- [main] o.a.r.s.a.ListenerContainerConfiguration : Register the listener to container, listenerBeanName:noticeMessageListener, containerBeanName:org.apache.rocketmq.spring.support.DefaultRocketMQListenerContainer_2
2022-05-09 09:32:10.971  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@38b65eb9
2022-05-09 09:32:10.971  INFO 23788 --- [main] RocketmqRemoting                         : name server address updated. NEW : [192.168.120.181:9876] , OLD: null
2022-05-09 09:32:11.285  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:PullMessageService started:false lastThread:null
2022-05-09 09:32:11.286  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:RebalanceService started:false lastThread:null
2022-05-09 09:32:11.348  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : new name server is chosen. OLD: null , NEW: 192.168.120.181:9876. namesrvIndex = 521
2022-05-09 09:32:11.353  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:32:11.371  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:32:11.373  INFO 23788 --- [MQClientFactoryScheduledThread] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@37038e7(success)
2022-05-09 09:32:11.390  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:10911] asynchronously
2022-05-09 09:32:11.391  INFO 23788 --- [NettyClientWorkerThread_2] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:10911
2022-05-09 09:32:11.392  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:10911] success, AbstractBootstrap$PendingRegistrationPromise@19a5d711(success)
2022-05-09 09:32:11.396  INFO 23788 --- [main] a.r.s.s.DefaultRocketMQListenerContainer : running container: DefaultRocketMQListenerContainer{consumerGroup='lili_after_sale_group', nameServer='192.168.120.181:9876', topic='lili_after_sale_topic', consumeMode=CONCURRENTLY, selectorType=TAG, selectorExpression='*', messageModel=CLUSTERING}
2022-05-09 09:32:11.397  INFO 23788 --- [main] o.a.r.s.a.ListenerContainerConfiguration : Register the listener to container, listenerBeanName:afterSaleMessageListener, containerBeanName:org.apache.rocketmq.spring.support.DefaultRocketMQListenerContainer_3
2022-05-09 09:32:12.017  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@7c89133
2022-05-09 09:32:12.017  INFO 23788 --- [main] RocketmqRemoting                         : name server address updated. NEW : [192.168.120.181:9876] , OLD: null
2022-05-09 09:32:12.304  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:PullMessageService started:false lastThread:null
2022-05-09 09:32:12.305  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:RebalanceService started:false lastThread:null
2022-05-09 09:32:12.305  INFO 23788 --- [main] RocketmqRemoting                         : new name server is chosen. OLD: null , NEW: 192.168.120.181:9876. namesrvIndex = 228
2022-05-09 09:32:12.306  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:32:12.308  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:32:12.309  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@15cf663c(success)
2022-05-09 09:32:12.317  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:10911] asynchronously
2022-05-09 09:32:12.319  INFO 23788 --- [NettyClientWorkerThread_2] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:10911
2022-05-09 09:32:12.321  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:10911] success, AbstractBootstrap$PendingRegistrationPromise@6cd75a1b(success)
2022-05-09 09:32:12.326  INFO 23788 --- [main] a.r.s.s.DefaultRocketMQListenerContainer : running container: DefaultRocketMQListenerContainer{consumerGroup='lili_goods_group', nameServer='192.168.120.181:9876', topic='lili_goods_topic', consumeMode=CONCURRENTLY, selectorType=TAG, selectorExpression='*', messageModel=CLUSTERING}
2022-05-09 09:32:12.327  INFO 23788 --- [main] o.a.r.s.a.ListenerContainerConfiguration : Register the listener to container, listenerBeanName:goodsMessageListener, containerBeanName:org.apache.rocketmq.spring.support.DefaultRocketMQListenerContainer_4
2022-05-09 09:32:12.923  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@2c9e3083
2022-05-09 09:32:12.923  INFO 23788 --- [main] RocketmqRemoting                         : name server address updated. NEW : [192.168.120.181:9876] , OLD: null
2022-05-09 09:32:13.236  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:PullMessageService started:false lastThread:null
2022-05-09 09:32:13.237  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:RebalanceService started:false lastThread:null
2022-05-09 09:32:13.238  INFO 23788 --- [main] RocketmqRemoting                         : new name server is chosen. OLD: null , NEW: 192.168.120.181:9876. namesrvIndex = 882
2022-05-09 09:32:13.239  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:32:13.242  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:32:13.243  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@5748ffe3(success)
2022-05-09 09:32:13.254  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:10911] asynchronously
2022-05-09 09:32:13.256  INFO 23788 --- [NettyClientWorkerThread_2] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:10911
2022-05-09 09:32:13.258  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:10911] success, AbstractBootstrap$PendingRegistrationPromise@7da7a932(success)
2022-05-09 09:32:13.265  INFO 23788 --- [main] a.r.s.s.DefaultRocketMQListenerContainer : running container: DefaultRocketMQListenerContainer{consumerGroup='lili_order_group', nameServer='192.168.120.181:9876', topic='lili_order_topic', consumeMode=CONCURRENTLY, selectorType=TAG, selectorExpression='*', messageModel=CLUSTERING}
2022-05-09 09:32:13.265  INFO 23788 --- [main] o.a.r.s.a.ListenerContainerConfiguration : Register the listener to container, listenerBeanName:orderMessageListener, containerBeanName:org.apache.rocketmq.spring.support.DefaultRocketMQListenerContainer_5
2022-05-09 09:32:13.996  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@5d6d21e2
2022-05-09 09:32:13.996  INFO 23788 --- [main] RocketmqRemoting                         : name server address updated. NEW : [192.168.120.181:9876] , OLD: null
2022-05-09 09:32:14.295  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:PullMessageService started:false lastThread:null
2022-05-09 09:32:14.295  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:RebalanceService started:false lastThread:null
2022-05-09 09:32:14.296  INFO 23788 --- [main] RocketmqRemoting                         : new name server is chosen. OLD: null , NEW: 192.168.120.181:9876. namesrvIndex = 510
2022-05-09 09:32:14.297  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:32:14.301  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:32:14.302  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@35ee7dc8(success)
2022-05-09 09:32:14.311  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:10911] asynchronously
2022-05-09 09:32:14.312  INFO 23788 --- [NettyClientWorkerThread_2] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:10911
2022-05-09 09:32:14.313  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:10911] success, AbstractBootstrap$PendingRegistrationPromise@2b65081d(success)
2022-05-09 09:32:14.319  INFO 23788 --- [main] a.r.s.s.DefaultRocketMQListenerContainer : running container: DefaultRocketMQListenerContainer{consumerGroup='lili_member_group', nameServer='192.168.120.181:9876', topic='lili_member_topic', consumeMode=CONCURRENTLY, selectorType=TAG, selectorExpression='*', messageModel=CLUSTERING}
2022-05-09 09:32:14.319  INFO 23788 --- [main] o.a.r.s.a.ListenerContainerConfiguration : Register the listener to container, listenerBeanName:memberMessageListener, containerBeanName:org.apache.rocketmq.spring.support.DefaultRocketMQListenerContainer_6
2022-05-09 09:32:14.956  INFO 23788 --- [main] io.netty.channel.nio.NioEventLoop        : instrumented a special java.util.Set into: sun.nio.ch.WindowsSelectorImpl@525dd5af
2022-05-09 09:32:14.957  INFO 23788 --- [main] RocketmqRemoting                         : name server address updated. NEW : [192.168.120.181:9876] , OLD: null
2022-05-09 09:32:15.242  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:PullMessageService started:false lastThread:null
2022-05-09 09:32:15.243  INFO 23788 --- [main] RocketmqCommon                           : Try to start service thread:RebalanceService started:false lastThread:null
2022-05-09 09:32:15.243  INFO 23788 --- [main] RocketmqRemoting                         : new name server is chosen. OLD: null , NEW: 192.168.120.181:9876. namesrvIndex = 170
2022-05-09 09:32:15.244  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:9876] asynchronously
2022-05-09 09:32:15.246  INFO 23788 --- [NettyClientWorkerThread_1] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:9876
2022-05-09 09:32:15.247  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:9876] success, AbstractBootstrap$PendingRegistrationPromise@38a7f7a2(success)
2022-05-09 09:32:15.255  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: begin to connect remote host[192.168.120.181:10911] asynchronously
2022-05-09 09:32:15.257  INFO 23788 --- [NettyClientWorkerThread_2] RocketmqRemoting                         : NETTY CLIENT PIPELINE: CONNECT  UNKNOWN => 192.168.120.181:10911
2022-05-09 09:32:15.259  INFO 23788 --- [main] RocketmqRemoting                         : createChannel: connect remote host[192.168.120.181:10911] success, AbstractBootstrap$PendingRegistrationPromise@663e2cfd(success)
2022-05-09 09:32:15.263  INFO 23788 --- [main] a.r.s.s.DefaultRocketMQListenerContainer : running container: DefaultRocketMQListenerContainer{consumerGroup='lili_promotion_group', nameServer='192.168.120.181:9876', topic='lili_promotion_topic', consumeMode=CONCURRENTLY, selectorType=TAG, selectorExpression='*', messageModel=CLUSTERING}
2022-05-09 09:32:15.263  INFO 23788 --- [main] o.a.r.s.a.ListenerContainerConfiguration : Register the listener to container, listenerBeanName:timeTriggerConsumer, containerBeanName:org.apache.rocketmq.spring.support.DefaultRocketMQListenerContainer_7
2022-05-09 09:32:15.319  INFO 23788 --- [main] o.s.i.endpoint.EventDrivenConsumer       : Adding {logging-channel-adapter:_org.springframework.integration.errorLogger} as a subscriber to the 'errorChannel' channel
2022-05-09 09:32:15.320  INFO 23788 --- [main] o.s.i.channel.PublishSubscribeChannel    : Channel 'application.errorChannel' has 1 subscriber(s).
2022-05-09 09:32:15.320  INFO 23788 --- [main] o.s.i.endpoint.EventDrivenConsumer       : started bean '_org.springframework.integration.errorLogger'
2022-05-09 09:32:15.385  INFO 23788 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8888 (http) with context path ''
2022-05-09 09:32:15.386  INFO 23788 --- [main] u.j.c.RefreshScopeRefreshedEventListener : Refreshing cached encryptable property sources on ServletWebServerInitializedEvent
2022-05-09 09:32:15.389  INFO 23788 --- [main] CachingDelegateEncryptablePropertySource : Property Source systemProperties refreshed
2022-05-09 09:32:15.390  INFO 23788 --- [main] CachingDelegateEncryptablePropertySource : Property Source systemEnvironment refreshed
2022-05-09 09:32:15.408  INFO 23788 --- [main] CachingDelegateEncryptablePropertySource : Property Source random refreshed
2022-05-09 09:32:15.408  INFO 23788 --- [main] CachingDelegateEncryptablePropertySource : Property Source Config resource 'class path resource [application.yml]' via location 'optional:classpath:/' refreshed
2022-05-09 09:32:15.409  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Converting PropertySource server.ports [org.springframework.core.env.MapPropertySource] to EncryptableMapPropertySourceWrapper
2022-05-09 09:32:15.409  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Skipping PropertySource configurationProperties [class org.springframework.boot.context.properties.source.ConfigurationPropertySourcesPropertySource
2022-05-09 09:32:15.410  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Skipping PropertySource servletConfigInitParams [class org.springframework.core.env.PropertySource$StubPropertySource
2022-05-09 09:32:15.411  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Converting PropertySource servletContextInitParams [org.springframework.web.context.support.ServletContextPropertySource] to EncryptableEnumerablePropertySourceWrapper
2022-05-09 09:32:15.411  INFO 23788 --- [main] c.u.j.EncryptablePropertySourceConverter : Converting PropertySource Management Server [org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$1] to EncryptablePropertySourceWrapper
2022-05-09 09:32:15.412  INFO 23788 --- [main] d.s.w.p.DocumentationPluginsBootstrapper : Documentation plugins bootstrapped
2022-05-09 09:32:15.429  INFO 23788 --- [main] d.s.w.p.DocumentationPluginsBootstrapper : Found 13 custom documentation plugin(s)
2022-05-09 09:32:16.708  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:16.920  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:17.103  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:17.267  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:17.426  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:17.564  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:17.712  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:17.993  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:18.140  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:18.329  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:18.461  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:18.577  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:18.685  INFO 23788 --- [main] s.d.s.w.s.ApiListingReferenceScanner     : Scanning for api listing references
2022-05-09 09:32:18.959  INFO 23788 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: getFileListUsingGET_1
2022-05-09 09:32:19.026  INFO 23788 --- [main] .d.s.w.r.o.CachingOperationNameGenerator : Generating unique operation named: uploadUsingPOST_1
2022-05-09 09:32:19.032  INFO 23788 --- [main] o.s.s.quartz.SchedulerFactoryBean        : Starting Quartz Scheduler now
2022-05-09 09:32:19.032  INFO 23788 --- [main] org.quartz.core.QuartzScheduler          : Scheduler quartzScheduler_$_NON_CLUSTERED started.
2022-05-09 09:32:19.091  INFO 23788 --- [main] cn.lili.ShopApiApplication               : Started ShopApiApplication in 167.183 seconds (JVM running for 170.178)
2022-05-09 09:32:21.011  INFO 23788 --- [main] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:32:21.011  INFO 23788 --- [main] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sensitive_word,create_by,create_time,update_by,update_time,delete_flag  FROM li_sensitive_words
2022-05-09 09:32:21.012  INFO 23788 --- [main] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@4dd8a37e, tablesContext=TablesContext(tables=[Table(name=li_sensitive_words, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=80, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sensitive_word, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sensitive_word, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@37735657, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@2870e80f, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@772a73b4, containsSubquery=false)
2022-05-09 09:32:21.013  INFO 23788 --- [main] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sensitive_word,create_by,create_time,update_by,update_time,delete_flag  FROM li_sensitive_words
2022-05-09 09:32:21.925  INFO 23788 --- [pool-8-thread-1] c.l.c.trigger.AbstractDelayQueueListen   : 延时队列机器PROMOTION开始运作
2022-05-09 09:32:21.929  INFO 23788 --- [main] c.l.c.s.init.SensitiveWordsLoader        : 系统初始化敏感词
2022-05-09 09:32:21.932  INFO 23788 --- [main] c.l.c.sensitive.SensitiveWordsFilter     : 开始初始化敏感词
2022-05-09 09:32:28.595  WARN 23788 --- [registrationTask1] d.c.b.a.c.r.ApplicationRegistrator       : Failed to register application as Application(name=spring-boot-application, managementUrl=http://DESKTOP-MTHKMGC:8888/actuator, healthUrl=http://DESKTOP-MTHKMGC:8888/actuator/health, serviceUrl=http://DESKTOP-MTHKMGC:8888/) at spring-boot-admin ([http://192.168.120.181:8000/instances]): I/O error on POST request for "http://192.168.120.181:8000/instances": Connect to 192.168.120.181:8000 [/192.168.120.181] failed: Connection refused: connect; nested exception is org.apache.http.conn.HttpHostConnectException: Connect to 192.168.120.181:8000 [/192.168.120.181] failed: Connection refused: connect. Further attempts are logged on DEBUG level
2022-05-09 09:33:00.104  INFO 23788 --- [xxl-rpc, EmbedServer bizThreadPool-394292381] c.xxl.job.core.executor.XxlJobExecutor   : >>>>>>>>>>> xxl-job regist JobThread success, jobId:3, handler:com.xxl.job.core.handler.impl.MethodJobHandler@70420c70[class cn.lili.consumer.timetask.TimedTaskJobHandler#everyMinuteExecute]
2022-05-09 09:33:00.109  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:33:00.241  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:33:00.242  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT id,setting_value,create_by,create_time,update_by,update_time,delete_flag FROM li_setting WHERE id=? 
2022-05-09 09:33:00.242  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5fd86f5c, tablesContext=TablesContext(tables=[Table(name=li_setting, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=7, stopIndex=78, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=setting_value, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, setting_value, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@7d8551c2, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@206ac885, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@7905bb48, containsSubquery=false)
2022-05-09 09:33:00.242  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT id,setting_value,create_by,create_time,update_by,update_time,delete_flag FROM li_setting WHERE id=?  ::: [ORDER_SETTING]
2022-05-09 09:33:00.846  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:33:00.846  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:33:00.846  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@65fcdc33, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@122e5b00, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@58210714, containsSubquery=false)
2022-05-09 09:33:00.853  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 08:58:00.503]
2022-05-09 09:33:00.988  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:33:00.988  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:33:00.988  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@4496f864, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@58160286, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@2ae09ee3, containsSubquery=false)
2022-05-09 09:33:00.988  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 08:58:00.922]
2022-05-09 09:34:00.034  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:34:00.042  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:34:00.043  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:34:00.043  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@7e68633e, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@77f0a633, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@264ca7ed, containsSubquery=false)
2022-05-09 09:34:00.044  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 08:59:00.038]
2022-05-09 09:34:00.085  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:34:00.085  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:34:00.085  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@add48aa, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@3c96741d, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@672c2764, containsSubquery=false)
2022-05-09 09:34:00.085  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 08:59:00.083]
2022-05-09 09:35:00.042  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:35:00.048  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:35:00.049  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:35:00.049  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@1565cd3d, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@13f4dff2, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@4e55d2fe, containsSubquery=false)
2022-05-09 09:35:00.052  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:00:00.045]
2022-05-09 09:35:00.093  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:35:00.093  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:35:00.093  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@395e865c, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@597c61ab, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@51c75d0f, containsSubquery=false)
2022-05-09 09:35:00.093  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:00:00.091]
2022-05-09 09:36:00.085  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:36:00.133  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:36:00.133  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:36:00.133  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@2c5cdced, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@4718c34c, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@287e5d51, containsSubquery=false)
2022-05-09 09:36:00.136  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:01:00.127]
2022-05-09 09:36:00.243  WARN 23788 --- [Thread-22] c.a.druid.pool.DruidAbstractDataSource   : discard long time none received connection. , jdbcUrl : jdbc:mysql://39.98.226.242:2020/lilishop?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai, version : 1.2.8, lastPacketReceivedIdleMillis : 60061
2022-05-09 09:36:07.350  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:36:07.351  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:36:07.351  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@745ded17, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@21084814, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@33e94d8d, containsSubquery=false)
2022-05-09 09:36:07.351  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:01:07.348]
2022-05-09 09:37:00.029  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:37:00.035  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:37:00.035  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:37:00.036  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@3e8707be, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@7c1f6a39, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@9b641b, containsSubquery=false)
2022-05-09 09:37:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:02:00.033]
2022-05-09 09:37:00.087  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:37:00.087  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:37:00.087  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@61628d7f, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@3a0286f4, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@63af89b2, containsSubquery=false)
2022-05-09 09:37:00.087  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:02:00.086]
2022-05-09 09:38:00.055  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:38:00.064  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:38:00.064  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:38:00.064  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@5b75374, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@1a4aa869, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@45d54109, containsSubquery=false)
2022-05-09 09:38:00.071  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:03:00.061]
2022-05-09 09:38:00.111  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:38:00.111  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:38:00.111  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@7c4ba7c1, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@13797c48, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@6baeaf74, containsSubquery=false)
2022-05-09 09:38:00.111  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:03:00.109]
2022-05-09 09:39:00.023  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:39:00.029  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:39:00.030  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:39:00.030  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@4b2c8718, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@55674406, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@3840ba3c, containsSubquery=false)
2022-05-09 09:39:00.034  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:04:00.026]
2022-05-09 09:39:00.074  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:39:00.074  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:39:00.074  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@433e8ecf, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@51fd9ce5, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@2db416e4, containsSubquery=false)
2022-05-09 09:39:00.074  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:04:00.071]
2022-05-09 09:40:00.226  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:40:00.240  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:40:00.240  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:40:00.240  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@1bf1421f, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@5f3c0eb2, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@5eb981e1, containsSubquery=false)
2022-05-09 09:40:00.243  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:05:00.232]
2022-05-09 09:40:00.287  WARN 23788 --- [Thread-22] c.a.druid.pool.DruidAbstractDataSource   : discard long time none received connection. , jdbcUrl : jdbc:mysql://39.98.226.242:2020/lilishop?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai, version : 1.2.8, lastPacketReceivedIdleMillis : 60178
2022-05-09 09:40:00.325  WARN 23788 --- [Thread-22] c.a.druid.pool.DruidAbstractDataSource   : discard long time none received connection. , jdbcUrl : jdbc:mysql://39.98.226.242:2020/lilishop?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai, version : 1.2.8, lastPacketReceivedIdleMillis : 232939
2022-05-09 09:40:10.643  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:40:10.644  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:40:10.644  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@13723afb, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@24b4611c, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@31207526, containsSubquery=false)
2022-05-09 09:40:10.644  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:05:10.64]
2022-05-09 09:41:00.024  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:41:00.034  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:41:00.035  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:41:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@5d8b19d4, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@6f30de06, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@cdc0f27, containsSubquery=false)
2022-05-09 09:41:00.046  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:06:00.03]
2022-05-09 09:41:00.091  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:41:00.092  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:41:00.092  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@3ba64349, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@576fd62d, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@7c802915, containsSubquery=false)
2022-05-09 09:41:00.092  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:06:00.089]
2022-05-09 09:42:00.037  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:42:00.043  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:42:00.044  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:42:00.044  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@755b2765, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@86e605a, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@12610534, containsSubquery=false)
2022-05-09 09:42:00.044  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:07:00.041]
2022-05-09 09:42:00.085  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:42:00.085  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:42:00.085  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@7bcb3a56, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@6199d8be, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@49434226, containsSubquery=false)
2022-05-09 09:42:00.085  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:07:00.083]
2022-05-09 09:43:00.030  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:43:00.035  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:43:00.035  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:43:00.036  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@23051ffa, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@70843bce, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@316f4b6d, containsSubquery=false)
2022-05-09 09:43:00.038  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:08:00.032]
2022-05-09 09:43:00.084  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:43:00.084  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:43:00.084  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@540ba396, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@1f74ae59, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@1db5b8a9, containsSubquery=false)
2022-05-09 09:43:00.084  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:08:00.083]
2022-05-09 09:44:00.029  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:44:00.032  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:44:00.033  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:44:00.033  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@2e02719f, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@1ec2e406, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@35fd37c, containsSubquery=false)
2022-05-09 09:44:00.035  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:09:00.031]
2022-05-09 09:44:00.076  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:44:00.076  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:44:00.076  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@53c4e969, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@2efd045e, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@2f18f21d, containsSubquery=false)
2022-05-09 09:44:00.076  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:09:00.074]
2022-05-09 09:45:00.032  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:45:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:45:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:45:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@39d6c0d9, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@513655e4, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@7cf6498d, containsSubquery=false)
2022-05-09 09:45:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:10:00.035]
2022-05-09 09:45:00.079  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:45:00.079  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:45:00.079  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@1038bc96, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@5ecc253d, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@4e888ba8, containsSubquery=false)
2022-05-09 09:45:00.079  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:10:00.077]
2022-05-09 09:46:00.033  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:46:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:46:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:46:00.037  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@458b77eb, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@4fd47139, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@24ce1c76, containsSubquery=false)
2022-05-09 09:46:00.043  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:11:00.035]
2022-05-09 09:46:00.086  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:46:00.087  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:46:00.087  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@720feae3, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@4ac1b1f7, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@3c61946a, containsSubquery=false)
2022-05-09 09:46:00.087  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:11:00.084]
2022-05-09 09:47:00.030  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:47:00.034  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:47:00.034  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:47:00.034  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@63a12103, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@53d32bd9, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@1483db18, containsSubquery=false)
2022-05-09 09:47:00.035  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:12:00.032]
2022-05-09 09:47:00.075  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:47:00.076  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:47:00.076  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@545a6fd1, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@2f4dcf1f, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@25847a0f, containsSubquery=false)
2022-05-09 09:47:00.076  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:12:00.073]
2022-05-09 09:48:00.083  INFO 23788 --- [Thread-22] c.l.c.timetask.TimedTaskJobHandler       : 每分钟任务执行
2022-05-09 09:48:00.091  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:48:00.091  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?)
2022-05-09 09:48:00.092  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@421634c5, tablesContext=TablesContext(tables=[Table(name=li_order, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=704, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=sn, alias=Optional.absent()), ColumnProjection(owner=null, name=trade_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=store_id, alias=Optional.absent()), ColumnProjection(owner=null, name=store_name, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=order_status, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=deliver_status, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_method, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_time, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_name, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_mobile, alias=Optional.absent()), ColumnProjection(owner=null, name=delivery_method, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_address_id_path, alias=Optional.absent()), ColumnProjection(owner=null, name=consignee_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=flow_price, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_price, alias=Optional.absent()), ColumnProjection(owner=null, name=freight_price, alias=Optional.absent()), ColumnProjection(owner=null, name=discount_price, alias=Optional.absent()), ColumnProjection(owner=null, name=update_price, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_no, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_code, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_name, alias=Optional.absent()), ColumnProjection(owner=null, name=weight, alias=Optional.absent()), ColumnProjection(owner=null, name=goods_num, alias=Optional.absent()), ColumnProjection(owner=null, name=remark, alias=Optional.absent()), ColumnProjection(owner=null, name=cancel_reason, alias=Optional.absent()), ColumnProjection(owner=null, name=complete_time, alias=Optional.absent()), ColumnProjection(owner=null, name=logistics_time, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_order_no, alias=Optional.absent()), ColumnProjection(owner=null, name=client_type, alias=Optional.absent()), ColumnProjection(owner=null, name=need_receipt, alias=Optional.absent()), ColumnProjection(owner=null, name=parent_order_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=promotion_id, alias=Optional.absent()), ColumnProjection(owner=null, name=order_type, alias=Optional.absent()), ColumnProjection(owner=null, name=order_promotion_type, alias=Optional.absent()), ColumnProjection(owner=null, name=price_detail, alias=Optional.absent()), ColumnProjection(owner=null, name=can_return, alias=Optional.absent()), ColumnProjection(owner=null, name=verification_code, alias=Optional.absent()), ColumnProjection(owner=null, name=distribution_id, alias=Optional.absent()), ColumnProjection(owner=null, name=use_store_member_coupon_ids, alias=Optional.absent()), ColumnProjection(owner=null, name=use_platform_member_coupon_id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=update_by, alias=Optional.absent()), ColumnProjection(owner=null, name=update_time, alias=Optional.absent()), ColumnProjection(owner=null, name=delete_flag, alias=Optional.absent())], columnLabels=[id, sn, trade_sn, store_id, store_name, member_id, member_name, order_status, pay_status, deliver_status, receivable_no, payment_method, payment_time, consignee_name, consignee_mobile, delivery_method, consignee_address_path, consignee_address_id_path, consignee_detail, flow_price, goods_price, freight_price, discount_price, update_price, logistics_no, logistics_code, logistics_name, weight, goods_num, remark, cancel_reason, complete_time, logistics_time, pay_order_no, client_type, need_receipt, parent_order_sn, promotion_id, order_type, order_promotion_type, price_detail, can_return, verification_code, distribution_id, use_store_member_coupon_ids, use_platform_member_coupon_id, create_by, create_time, update_by, update_time, delete_flag]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@3e615d5b, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@7646ed34, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@5fcdb655, containsSubquery=false)
2022-05-09 09:48:00.098  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,sn,trade_sn,store_id,store_name,member_id,member_name,order_status,pay_status,deliver_status,receivable_no,payment_method,payment_time,consignee_name,consignee_mobile,delivery_method,consignee_address_path,consignee_address_id_path,consignee_detail,flow_price,goods_price,freight_price,discount_price,update_price,logistics_no,logistics_code,logistics_name,weight,goods_num,remark,cancel_reason,complete_time,logistics_time,pay_order_no,client_type,need_receipt,parent_order_sn,promotion_id,order_type,order_promotion_type,price_detail,can_return,verification_code,distribution_id,use_store_member_coupon_ids,use_platform_member_coupon_id,create_by,create_time,update_by,update_time,delete_flag  FROM li_order 
 
 WHERE (order_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:13:00.088]
2022-05-09 09:48:00.149  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Rule Type: sharding
2022-05-09 09:48:00.149  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Logic SQL: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?)
2022-05-09 09:48:00.149  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : SQLStatement: SelectSQLStatementContext(super=CommonSQLStatementContext(sqlStatement=org.apache.shardingsphere.sql.parser.sql.statement.dml.SelectStatement@5f3d641a, tablesContext=TablesContext(tables=[Table(name=li_recharge, alias=Optional.absent())], schema=Optional.absent())), projectionsContext=ProjectionsContext(startIndex=8, stopIndex=145, distinctRow=false, projections=[ColumnProjection(owner=null, name=id, alias=Optional.absent()), ColumnProjection(owner=null, name=create_by, alias=Optional.absent()), ColumnProjection(owner=null, name=create_time, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_sn, alias=Optional.absent()), ColumnProjection(owner=null, name=member_id, alias=Optional.absent()), ColumnProjection(owner=null, name=member_name, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_money, alias=Optional.absent()), ColumnProjection(owner=null, name=recharge_way, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_status, alias=Optional.absent()), ColumnProjection(owner=null, name=payment_plugin_id, alias=Optional.absent()), ColumnProjection(owner=null, name=receivable_no, alias=Optional.absent()), ColumnProjection(owner=null, name=pay_time, alias=Optional.absent())], columnLabels=[id, create_by, create_time, recharge_sn, member_id, member_name, recharge_money, recharge_way, pay_status, payment_plugin_id, receivable_no, pay_time]), groupByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.groupby.GroupByContext@170832b0, orderByContext=org.apache.shardingsphere.sql.parser.relation.segment.select.orderby.OrderByContext@2545411a, paginationContext=org.apache.shardingsphere.sql.parser.relation.segment.select.pagination.PaginationContext@d70106a, containsSubquery=false)
2022-05-09 09:48:00.149  INFO 23788 --- [Thread-22] ShardingSphere-SQL                       : Actual SQL: default-datasource ::: SELECT  id,create_by,create_time,recharge_sn,member_id,member_name,recharge_money,recharge_way,pay_status,payment_plugin_id,receivable_no,pay_time  FROM li_recharge 
 
 WHERE (pay_status = ? AND create_time <= ?) ::: [UNPAID, 2022-05-09 09:13:00.145]
